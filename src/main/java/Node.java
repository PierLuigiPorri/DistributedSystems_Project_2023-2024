//Reliable broadcast library
//Implement a library for reliable broadcast communication among a set of faulty processes, plus a simple application to test it (you are free to choose the application you prefer to highlight the characteristics of the library).
//The library must guarantee virtual synchrony, while ordering should be at least fifo.
//The project can be implemented as a real distributed application (for example, in Java) or it can be simulated using OmNet++.
//Assumptions:
//Assume (and leverage) a LAN scenario (i.e., link-layer broadcast is available).
//You may also assume no processes fail during the time required for previous failures to be recovered.

import java.net.InetAddress;
import java.util.List;

public class Node {
    private List<InetAddress> view;
    private List<Integer> viewTimers;
    private int id;
    private InetAddress address;
    private int port;
    private String Nodestate; //It is an ENUM with all possible states of a node. It can be, for example: "Joining", "Active", "Leaving", "Failed"
    private ReliableBroadcastLibrary reliableBroadcastLibrary;

    //autogenerated id, autoincrement
    private static int idCounter = 0;

    public Node(InetAddress address, int port, String state) {
        this.id = idCounter++;
        this.address = address;
        this.port = port;
        this.Nodestate = state;
    }

    public Node(InetAddress address, int port, String state, List<InetAddress> view, List<Integer> viewTimers) {
        this.id = idCounter++;
        this.address = address;
        this.port = port;
        this.Nodestate = state;
        this.view = view;
        this.viewTimers = viewTimers;
    }

    public void processMessage(Message message){ //TODO: this method should be called by the receiver thread
        this.reliableBroadcastLibrary.processMessage(message, this.view);
    }


    //Every node is listening for incoming messages. When a message is received, the node processes it.
    //The listening process is done in a separate thread.

    public void listenThread() {
        ListeningTask listeningTask = new ListeningTask(this, port);
        Thread listeningThread = new Thread(listeningTask);
        listeningThread.start();
    }

    // sending a message to all view members (broadcast)
    public void send(String message) {
        //for (Node node : view)
    }


    // Getters and setters

    public List<InetAddress> getView() {
        return view;
    }

    public List<Integer> getViewTimers() {
        return viewTimers;
    }

    public void setView(List<InetAddress> view) {
        this.view = view;
    }

    public void setViewTimers(List<Integer> viewTimers) {
        this.viewTimers = viewTimers;
    }

    public int getId() {
        return this.id;
    }

    public InetAddress getAddress() {
        return this.address;
    }

    public int getPort() {
        return this.port;
    }

    public String getNodestate() {
        return this.Nodestate;
    }

    public void setNodestate(String nodestate) {
        this.Nodestate = nodestate;
    }

    public ReliableBroadcastLibrary getReliableBroadcastLibrary() {
        return reliableBroadcastLibrary;
    }

}